// MACHINE GENERATED BY 'go generate' COMMAND; DO NOT EDIT

package wsl

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return nil
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modOle32  = windows.NewLazySystemDLL("Ole32.dll")
	modwslapi = windows.NewLazySystemDLL("wslapi.dll")

	procCoTaskMemFree                   = modOle32.NewProc("CoTaskMemFree")
	procWslConfigureDistribution        = modwslapi.NewProc("WslConfigureDistribution")
	procWslGetDistributionConfiguration = modwslapi.NewProc("WslGetDistributionConfiguration")
	procWslIsDistributionRegistered     = modwslapi.NewProc("WslIsDistributionRegistered")
	procWslLaunch                       = modwslapi.NewProc("WslLaunch")
	procWslLaunchInteractive            = modwslapi.NewProc("WslLaunchInteractive")
	procWslRegisterDistribution         = modwslapi.NewProc("WslRegisterDistribution")
	procWslUnregisterDistribution       = modwslapi.NewProc("WslUnregisterDistribution")
)

func coTaskMemFree(p unsafe.Pointer) (err error) {
	r1, _, e1 := syscall.Syscall(procCoTaskMemFree.Addr(), 1, uintptr(p), 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func configureDistribution(distributionName *uint16, defaultUID uint32, wslDistributionFlags uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procWslConfigureDistribution.Addr(), 3, uintptr(unsafe.Pointer(distributionName)), uintptr(defaultUID), uintptr(wslDistributionFlags))
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func getDistributionConfiguration(distributionName *uint16, distributionVersion *uint32, defaultUID *uint32, wslDistributionFlags *uint32, defaultEnvironmentVariables ***uint16, defaultEnvironmentVariableCount *uint32) (err error) {
	r1, _, e1 := syscall.Syscall6(procWslGetDistributionConfiguration.Addr(), 6, uintptr(unsafe.Pointer(distributionName)), uintptr(unsafe.Pointer(distributionVersion)), uintptr(unsafe.Pointer(defaultUID)), uintptr(unsafe.Pointer(wslDistributionFlags)), uintptr(unsafe.Pointer(defaultEnvironmentVariables)), uintptr(unsafe.Pointer(defaultEnvironmentVariableCount)))
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func isDistributionRegistered(distributionName *uint16) (rv bool) {
	r0, _, _ := syscall.Syscall(procWslIsDistributionRegistered.Addr(), 1, uintptr(unsafe.Pointer(distributionName)), 0, 0)
	rv = r0 != 0
	return
}

func launch(distributionName *uint16, command *uint16, useCurrentWorkingDirectory bool, stdIn windows.Handle, stdOut windows.Handle, stdErr windows.Handle, process *windows.Handle) (err error) {
	var _p0 uint32
	if useCurrentWorkingDirectory {
		_p0 = 1
	} else {
		_p0 = 0
	}
	r1, _, e1 := syscall.Syscall9(procWslLaunch.Addr(), 7, uintptr(unsafe.Pointer(distributionName)), uintptr(unsafe.Pointer(command)), uintptr(_p0), uintptr(stdIn), uintptr(stdOut), uintptr(stdErr), uintptr(unsafe.Pointer(process)), 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func launchInteractive(distributionName *uint16, command *uint16, useCurrentWorkingDirectory bool, exitCode *uint32) (err error) {
	var _p0 uint32
	if useCurrentWorkingDirectory {
		_p0 = 1
	} else {
		_p0 = 0
	}
	r1, _, e1 := syscall.Syscall6(procWslLaunchInteractive.Addr(), 4, uintptr(unsafe.Pointer(distributionName)), uintptr(unsafe.Pointer(command)), uintptr(_p0), uintptr(unsafe.Pointer(exitCode)), 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func registerDistribution(distributionName *uint16, tarGzFilename *uint16) (err error) {
	r1, _, e1 := syscall.Syscall(procWslRegisterDistribution.Addr(), 2, uintptr(unsafe.Pointer(distributionName)), uintptr(unsafe.Pointer(tarGzFilename)), 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func unregisterDistribution(distributionName *uint16) (err error) {
	r1, _, e1 := syscall.Syscall(procWslUnregisterDistribution.Addr(), 1, uintptr(unsafe.Pointer(distributionName)), 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = errnoErr(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}
